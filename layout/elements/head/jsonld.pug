-
  const full_url = url => {
    if (!url) return;
    const {origin, protocol} = new URL(config.url);

    if(/^(https?|file|ftps?|mailto|javascript|data:image\/[^;]{2,9};):/i.test(url)) {
      return url;
    }
    if(url.substring(0,2) == '//') {
      url = url_for(url);
      return protocol + url;
    }

    return origin + url;
  }
if(is_home())
  script(type="application/ld+json").
    {
      "@context": "http://schema.org",
      "@type": "Blog",
      "name": !{config.title ? `"${config.title}"` : 'null'},
      "url": !{config.url ? `"${config.url}"` : 'null'},
      "description": null,
      "editor": {
        "@type": "Person",
        "name": !{config.author ? `"${config.author}"` : 'null'}
      },
      "publisher": {
        "@type": "Person",
        "name": !{config.author ? `"${config.author}"` : 'null'}
      },
      "copyrightHolder": {
        "@type": "Person",
        "name": !{config.author ? `"${config.author}"` : 'null'}
      }
    }
if(is_post())
  -
    let keyword = page.tags && page.tags.reduce((str, entry) => {
      return str += entry.name + ',';
    }, ``).replace(/,+\s*$/, '');
  -
    let representImg = ((seoImage) => {
      let obj = {};
      const defaults = {
        url: null,
        width: null,
        height: null,
      };

      if (!seoImage && !hero.hasHero) return null;

      if(!seoImage) {
        obj = typeof hero === 'string' ? Object.assign({}, defaults, {url: hero}) : Object.assign({}, defaults, hero);
      }else {
        obj = typeof seoImage === 'string' ? Object.assign({}, defaults, {url: seoImage}) : Object.assign({}, defaults, seoImage);
      }

      return obj;
    })(page.seo && page.seo.image);

  script(type="application/ld+json").
    {
      "@context": "http://schema.org",
      "@type": "BlogPosting",
      "headline": !{page.title ? `"${page.title}"` : 'null'},
      "alternativeHeadline": !{page.subtitle ? `"${page.subtitle}"` : 'null'},
      "image": {
        "@type": "imageObject",
        "url": !{representImg && representImg.url ? `"${full_url(representImg.url)}"` : 'null'},
        "width": !{representImg && representImg.width ? `"${representImg.width}"` : 'null'},
        "height": !{representImg && representImg.height ? `"${representImg.height}"` : 'null'}
      },
      "genre": !{page.seo && page.seo.genre ? `"${page.seo.genre}"` : 'null'},
      "keywords": !{`"${keyword}"` || 'null'},
      "editor": {
        "@type": "Person",
        "name": !{page.seo && page.seo.author ? `"${page.seo.author}"` : config.author ? `"${config.author}"` : 'null'}
      },
      "publisher": {
        "@type": "Person",
        "name": !{page.seo && page.seo.author ? `"${page.seo.author}"` : config.author ? `"${config.author}"` : 'null'}
      },
      "author": {
        "@type": "Person",
        "name": !{page.seo && page.seo.author ? `"${page.seo.author}"` : config.author ? `"${config.author}"` : 'null'}
      },
      "url": !{page.permalink ? `"${page.permalink}"` : 'null'},
      "dateCreated": !{page.date ? `"${date(page.date, null)}"` : 'null'},
      "datePublished": !{page.date ? `"${date(page.date, null)}"` : 'null'},
      "articleBody": !{meta_description ? `"${meta_description.replace(/\n/, ' ')}"` : 'null'}
    }
if(is_archive() || is_category() || is_tag())
  script(type="application/ld+json").
    {
      "@context": "http://schema.org",
      "@type": "CollectionPage",
      "name": !{title ? `"${title}"` : 'null'}
      "headline": !{title ? `"${title}"` : 'null'},
      "mainEntity": {
        "@type": "ItemList",
        "itemListElement": !{JSON.stringify(postList.jsonld)}
      }
    }
